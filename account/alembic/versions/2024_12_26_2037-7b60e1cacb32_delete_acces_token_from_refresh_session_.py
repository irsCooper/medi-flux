"""delete acces token from refresh session table

Revision ID: 7b60e1cacb32
Revises: b98ca5e0dfda
Create Date: 2024-12-26 20:37:58.614256

"""
from typing import Sequence, Union
import uuid

from alembic import op
import bcrypt
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7b60e1cacb32'
down_revision: Union[str, None] = 'b98ca5e0dfda'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

roles = [
    {"name_role": "Admin"},
    {"name_role": "User"},
    {"name_role": "Manager"},
    {"name_role": "Doctor"},
]

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('refresh_session', 'access_token') 

    for role in roles:
        op.execute(f"INSERT INTO roles (name_role) VALUES ('{role['name_role']}') ON CONFLICT (name_role) DO NOTHING")

    password = bcrypt.hashpw(b"admin", bcrypt.gensalt()).decode()

    admin_id = uuid.uuid4()
    op.execute(
        sa.text(
            f"INSERT INTO users (id, last_name, first_name, user_name, hashed_password, active) "
            f"VALUES ('{admin_id}', 'admin', 'admin', 'admin', '{password}', '{True}') "
            f"ON CONFLICT (user_name) DO NOTHING"
        )
    )

    op.execute(
        sa.text(
            "INSERT INTO user_roles (user_id, role_id) "
            f"SELECT '{admin_id}', id FROM roles WHERE name_role = 'Admin' "
            "ON CONFLICT DO NOTHING"
        )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('refresh_session', sa.Column('access_token', sa.VARCHAR(), autoincrement=False, nullable=False))
    # ### end Alembic commands ###